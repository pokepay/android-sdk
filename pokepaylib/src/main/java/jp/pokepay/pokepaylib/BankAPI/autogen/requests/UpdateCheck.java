// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.pokepaylib.BankAPI.autogen.requests;

import java.util.HashMap;
import java.util.Map;

import jp.pokepay.pokepaylib.BankAPI.BankRequest;
import jp.pokepay.pokepaylib.BankAPI.BankRequestError;
import jp.pokepay.pokepaylib.ProcessingError;
import jp.pokepay.pokepaylib.Request;
import jp.pokepay.pokepaylib.BankAPI.autogen.responses.*;

public class UpdateCheck extends BankRequest {
    private Double amount;
    private String description;
    private String expiresAt;
    private String pointExpiresAt;
    private Integer pointExpiresInDays;
    private String checkId;

    public UpdateCheck(String checkId) {
        this.checkId = checkId;
    }

    public UpdateCheck amount(Double amount) {
        this.amount = amount;
        return this;
    }

    public UpdateCheck description(String description) {
        this.description = description;
        return this;
    }

    public UpdateCheck expiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }

    public UpdateCheck pointExpiresAt(String pointExpiresAt) {
        this.pointExpiresAt = pointExpiresAt;
        return this;
    }

    public UpdateCheck pointExpiresInDays(Integer pointExpiresInDays) {
        this.pointExpiresInDays = pointExpiresInDays;
        return this;
    }

    @Override
    protected final Request.Method method() {
        return Request.Method.PATCH;
    }

    @Override
    public String path() {
        return "/checks" + "/" + this.checkId;
    }

    @Override
    protected final Map<String, Object> parameters() {
        return new HashMap<String, Object>() {{
            if (amount != null) {
                put("amount", amount);
            }
            if (description != null) {
                put("description", description);
            }
            if (expiresAt != null) {
                put("expires_at", expiresAt);
            }
            if (pointExpiresAt != null) {
                put("point_expires_at", pointExpiresAt);
            }
            if (pointExpiresInDays != null) {
                put("point_expires_in_days", pointExpiresInDays);
            }
        }};
    }

    public final Check send(String accessToken) throws ProcessingError, BankRequestError {
        return super.send(Check.class, accessToken);
    }
}
