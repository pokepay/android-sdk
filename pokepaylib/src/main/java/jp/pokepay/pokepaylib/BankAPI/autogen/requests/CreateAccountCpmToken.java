// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.pokepaylib.BankAPI.autogen.requests;

import java.util.HashMap;
import java.util.Map;

import jp.pokepay.pokepaylib.BankAPI.BankRequest;
import jp.pokepay.pokepaylib.BankAPI.BankRequestError;
import jp.pokepay.pokepaylib.ProcessingError;
import jp.pokepay.pokepaylib.Request;
import jp.pokepay.pokepaylib.BankAPI.autogen.responses.*;

public class CreateAccountCpmToken extends BankRequest {
    private String[] scopes;
    private Integer expiresIn;
    private String metadata;
    private Boolean keepAlive;
    private Boolean isShortToken;
    private Uuid accountId;

    public CreateAccountCpmToken(Uuid accountId) {
        this.accountId = accountId;
    }

    public CreateAccountCpmToken scopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }

    public CreateAccountCpmToken expiresIn(Integer expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }

    public CreateAccountCpmToken metadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    public CreateAccountCpmToken keepAlive(Boolean keepAlive) {
        this.keepAlive = keepAlive;
        return this;
    }

    public CreateAccountCpmToken isShortToken(Boolean shortToken) {
        isShortToken = shortToken;
        return this;
    }

    @Override
    protected final Request.Method method() {
        return Request.Method.POST;
    }

    @Override
    public String path() {
        return "/accounts" + "/" + this.accountId + "/cpm";
    }

    @Override
    protected final Map<String, Object> parameters() {
        return new HashMap<String, Object>() {{
            if (scopes != null) {
                put("scopes", scopes);
            }
            if (expiresIn != null) {
                put("expires_in", expiresIn);
            }
            if (metadata != null) {
                put("metadata", metadata);
            }
            if (keepAlive != null) {
                put("keep_alive", keepAlive);
            }
            if (isShortToken != null) {
                put("is_short_token", isShortToken);
            }
        }};
    }

    public final CpmToken send(String accessToken) throws ProcessingError, BankRequestError {
        return super.send(CpmToken.class, accessToken);
    }
}
