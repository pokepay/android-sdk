// DO NOT EDIT: File is generated by code generator.
package jp.pokepay.pokepaylib.BankAPI.autogen.requests;

import java.util.HashMap;
import java.util.Map;

import jp.pokepay.pokepaylib.BankAPI.BankRequest;
import jp.pokepay.pokepaylib.BankAPI.BankRequestError;
import jp.pokepay.pokepaylib.ProcessingError;
import jp.pokepay.pokepaylib.Request;
import jp.pokepay.pokepaylib.BankAPI.autogen.responses.*;

public class CreateCheck extends BankRequest {
    private Double amount;
    private Double moneyAmount;
    private Double pointAmount;
    private String accountId;
    private String description;
    private Boolean isOnetime;
    private Integer usageLimit;
    private String expiresAt;
    private String pointExpiresAt;
    private Integer pointExpiresInDays;
    private String metadata;

    public CreateCheck() {
    }

    public CreateCheck amount(Double amount) {
        this.amount = amount;
        return this;
    }

    public CreateCheck moneyAmount(Double moneyAmount) {
        this.moneyAmount = moneyAmount;
        return this;
    }

    public CreateCheck pointAmount(Double pointAmount) {
        this.pointAmount = pointAmount;
        return this;
    }

    public CreateCheck accountId(String accountId) {
        this.accountId = accountId;
        return this;
    }

    public CreateCheck description(String description) {
        this.description = description;
        return this;
    }

    public CreateCheck isOnetime(Boolean onetime) {
        isOnetime = onetime;
        return this;
    }

    public CreateCheck usageLimit(Integer usageLimit) {
        this.usageLimit = usageLimit;
        return this;
    }

    public CreateCheck expiresAt(String expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }

    public CreateCheck pointExpiresAt(String pointExpiresAt) {
        this.pointExpiresAt = pointExpiresAt;
        return this;
    }

    public CreateCheck pointExpiresInDays(Integer pointExpiresInDays) {
        this.pointExpiresInDays = pointExpiresInDays;
        return this;
    }

    public CreateCheck metadata(String metadata) {
        this.metadata = metadata;
        return this;
    }

    @Override
    protected final Request.Method method() {
        return Request.Method.POST;
    }

    @Override
    public String path() {
        return "/checks";
    }

    @Override
    protected final Map<String, Object> parameters() {
        return new HashMap<String, Object>() {{
            if (amount != null) {
                put("amount", amount);
            }
            if (moneyAmount != null) {
                put("money_amount", moneyAmount);
            }
            if (pointAmount != null) {
                put("point_amount", pointAmount);
            }
            if (accountId != null) {
                put("account_id", accountId);
            }
            if (description != null) {
                put("description", description);
            }
            if (isOnetime != null) {
                put("is_onetime", isOnetime);
            }
            if (usageLimit != null) {
                put("usage_limit", usageLimit);
            }
            if (expiresAt != null) {
                put("expires_at", expiresAt);
            }
            if (pointExpiresAt != null) {
                put("point_expires_at", pointExpiresAt);
            }
            if (pointExpiresInDays != null) {
                put("point_expires_in_days", pointExpiresInDays);
            }
            if (metadata != null) {
                put("metadata", metadata);
            }
        }};
    }

    public final Check send(String accessToken) throws ProcessingError, BankRequestError {
        return super.send(Check.class, accessToken);
    }
}
